dataGridView1.ReadOnly = true;
            dataGridView1.AllowUserToAddRows = false;
            dataGridView1.AllowUserToDeleteRows = false;
            dataGridView1.AllowUserToResizeRows = false;
            dataGridView1.AllowUserToResizeColumns = false;
            dataGridView1.RowHeadersVisible = false;
            dataGridView1.ColumnHeadersVisible = false; // Скрыть заголовки столбцов
            dataGridView1.BorderStyle = BorderStyle.None; // Убрать границу таблицы
            dataGridView1.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill;
            // Добавление столбцов
            dataGridView1.Columns.Add("Column1", "Индекс массы тела");
            dataGridView1.Columns.Add("Column2", "Соответствие между массой человека и его ростом");

            // Добавление столбцов
            dataGridView1.Rows.Add("16 и менее", "Выраженный дефицит массы тела");
            dataGridView1.Rows.Add("16-18,5", "Недостаточная (дефицит) масса тела");
            dataGridView1.Rows.Add("18,5-25", "Норма");
            dataGridView1.Rows.Add("25-30", "Избыточная масса тела (предожирение)");
            dataGridView1.Rows.Add("30-35", "Ожирение первой степени");
            dataGridView1.Rows.Add("35-40", "Ожирение второй степени");
            dataGridView1.Rows.Add("40 и более", "Ожирение третьей степени (морбидное)");




             private void buttonFontEditor_Click(object sender, EventArgs e)
        {
            fontDialog1.ShowColor = true;
            fontDialog1.Font = AppSettings.AppFont; // Или Properties.Settings.Default.AppFont

            if (fontDialog1.ShowDialog() == DialogResult.OK)
            {
                Font oldFont = new Font("Segoe UI", 8); ;
                Size oldSize = new Size(940, 571); 
                //Size menu = new Size(562, 24);
                

                // Пробуем применить новый шрифт
                this.Font = fontDialog1.Font;

                // Обновляем layout формы
                this.PerformLayout();

                // Проверяем, не вышла ли форма за пределы экрана
                Rectangle screen = Screen.FromControl(this).WorkingArea;
                if (this.Width <= screen.Width && this.Height <= screen.Height)
                {
                    // Если всё в порядке - применяем изменения
                    AppSettings.AppFont = fontDialog1.Font;
                    ApplyFontToAllForms(fontDialog1.Font);
                }
                else
                {
                    // Если вышла за пределы - возвращаем как было
                    this.Font = oldFont;
                    this.Size = oldSize;
                    menuStrip1.Location = new Point(350, 5);
                    this.PerformLayout();

                    MessageBox.Show("Выбранный шрифт слишком большой и не помещается на экран.\nШрифт не был изменён.",
                                  "Предупреждение",
                                  MessageBoxButtons.OK,
                                  MessageBoxIcon.Warning);
                    // Сохраняем выбранный шрифт
                   // AppSettings.AppFont = fontDialog1.Font; // Вариант 1
                                                            // ИЛИ:
                                                            // Properties.Settings.Default.AppFont = fontDialog1.Font; // Вариант 2
                                                            // Properties.Settings.Default.Save(); // Сохраняем настройки

                    // Применяем шрифт ко всем открытым формам
                   // ApplyFontToAllForms(fontDialog1.Font);
                }
            }
        }

        // Метод для применения шрифта ко всем формам
        private void ApplyFontToAllForms(Font newFont)
        {
            foreach (Form form in Application.OpenForms)
            {
                form.Font = newFont;
                // Если нужно обновить шрифт вложенных элементов:
                UpdateControlsFont(form.Controls, newFont);
            }
        }

        // Рекурсивное обновление шрифта у всех элементов управления
        private void UpdateControlsFont(Control.ControlCollection controls, Font newFont)
        {
            foreach (Control control in controls)
            {
                control.Font = newFont;
                if (control.HasChildren)
                {
                    UpdateControlsFont(control.Controls, newFont);
                }
            }
        }
        private void ApplyFontToControls(Font font)
        {
            // Применяем шрифт к ListBox
            listBoxDiseases.Font = font;

            // Применяем шрифт к TextBox (если есть)
            textBoxSearchSymptoms.Font = font;

        }




        using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace MedList
{
    public partial class FontEditorForm : Form
    {
        public FontEditorForm()
        {
            InitializeComponent();

            // Заполняем ComboBox шрифтами
            foreach (FontFamily fontFamily in FontFamily.Families)
            {
                comboBoxFont.Items.Add(fontFamily.Name);
            }
            comboBoxFont.SelectedIndex = 0; // Выбираем первый шрифт по умолчанию

            // Заполняем ComboBox размерами шрифта
            for (int i = 8; i <= 24; i += 2)
            {
                comboBoxSize.Items.Add(i);
            }
            comboBoxSize.SelectedIndex = 2; // Выбираем размер 12 по умолчанию
        }

        private void buttonApply_Click(object sender, EventArgs e)
        {
            try
            {
                // Получаем выбранный шрифт и размер
                string fontName = comboBoxFont.SelectedItem.ToString();
                float fontSize = float.Parse(comboBoxSize.SelectedItem.ToString());

                // Определяем стиль шрифта
                FontStyle fontStyle = FontStyle.Regular;
                if (checkBoxBold.Checked) fontStyle |= FontStyle.Bold;
                if (checkBoxItalic.Checked) fontStyle |= FontStyle.Italic;

                // Создаем шрифт и сохраняем его в статическом классе
                AppSettings.AppFont = new Font(fontName, fontSize, fontStyle);

                // Закрываем форму с результатом DialogResult.OK
                this.DialogResult = DialogResult.OK;
                this.Close();
            }
            catch (Exception ex)
            {
                MessageBox.Show("Ошибка при выборе шрифта: " + ex.Message, "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
    }
    public static class AppSettings
    {
        public static Font AppFont { get; set; } = new Font("Segoe UI", 8); // Шрифт по умолчанию
        public static Font DefualtFont { get; set; } = new Font("Segoe UI", 8); // Шрифт по умолчанию
    }
}
